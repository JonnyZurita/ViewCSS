// ==========================================================================
//                             UICSS Mixin Grid
// ==========================================================================

// Container
@mixin make-container() {
	width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
}

// Max Width Container
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint,
	$container-max-width in $max-widths {
		@include media-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

// Row
@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-right: ($grid-gutter-width / -2);
	margin-left: ($grid-gutter-width / -2);
}

// Column
@mixin make-col-ready() {
	position: relative;
	width: 100%;
	min-height: 1px;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
}

// Column width
@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage($size / $columns);
	max-width: percentage($size / $columns);
}

// Column offset
@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: $size / $columns;
	margin-left: if($num==0, 0, percentage($num));
}

// Column Breackpoints
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px;
		padding-right: ($gutter / 2);
		padding-left: ($gutter / 2);
	}
	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);
		@for $i from 1 through $columns {
			.o-column#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}
		.o-column#{$infix},
		.o-column#{$infix}-auto {
			@extend %grid-column;
		}
		@include media-up($breakpoint, $breakpoints) {
			.o-column#{$infix} {
				flex-basis: 0;
				flex-grow: 1;
				max-width: 100%;
			}
			.o-column#{$infix}-auto {
				flex: 0 0 auto;
				width: auto;
				max-width: none;
			}
			@for $i from 1 through $columns {
				.o-column#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}
			.o-order#{$infix}-first {
				order: -1;
			}
			.o-order#{$infix}-last {
				order: $columns + 1;
			}
			@for $i from 0 through $columns {
				.o-order#{$infix}-#{$i} {
					order: $i;
				}
			}
			@for $i from 0 through ($columns - 1) {
				@if not ($infix=="" and $i==0) {
					.o-offset#{$infix}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}